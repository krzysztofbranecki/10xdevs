---
import Layout from "../layouts/Layout.astro";
import PageWrapper from "../components/common/PageWrapper.astro";
import { GenerateFlashcardsView } from "../components/generate/GenerateFlashcardsView";

// Dostęp do danych użytkownika
const { user } = Astro.locals;

// Skrypt do obsługi generowania fiszek
const generateScript = `
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.querySelector("form");
    const errorDiv = document.querySelector('[data-test="generate-error"]');
    const successDiv = document.querySelector('[data-test="generate-success"]');
    const resultContainer = document.querySelector('[data-test="flashcards-result"]');
    const loadingIndicator = document.querySelector('[data-test="loading-indicator"]');

    if (form && errorDiv && successDiv && resultContainer && loadingIndicator) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        
        // Ukrywamy komunikaty i pokazujemy ładowanie
        errorDiv.classList.add("hidden");
        successDiv.classList.add("hidden");
        resultContainer.classList.add("hidden");
        loadingIndicator.classList.remove("hidden");

        const formData = new FormData(form);
        const content = formData.get("content");
        const language = formData.get("language");
        const count = formData.get("count");
        
        // Walidacja po stronie klienta
        if (!content) {
          errorDiv.textContent = "Treść jest wymagana";
          errorDiv.classList.remove("hidden");
          loadingIndicator.classList.add("hidden");
          return;
        }
        
        try {
          // W przyszłości zostanie zastąpione rzeczywistym endpointem API
          // Symulacja odpowiedzi API
          setTimeout(() => {
            loadingIndicator.classList.add("hidden");
            
            // Przykładowe dane fiszek
            const mockData = {
              flashcards: [
                { front: "Apple", back: "Jabłko" },
                { front: "Book", back: "Książka" },
                { front: "Computer", back: "Komputer" }
              ]
            };
            
            // Wyświetlanie wygenerowanych fiszek
            resultContainer.innerHTML = '';
            mockData.flashcards.forEach(card => {
              const cardElement = document.createElement("div");
              cardElement.className = "bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-lg rounded-xl p-4 border border-white/10 mb-4";
              cardElement.innerHTML = \`
                <div class="flex justify-between mb-2">
                  <div class="font-medium text-blue-200">\${card.front}</div>
                  <div class="text-purple-200">\${card.back}</div>
                </div>
                <div class="flex justify-end mt-2">
                  <button class="text-xs bg-blue-500/30 hover:bg-blue-500/50 px-2 py-1 rounded-md text-blue-100 transition-colors">
                    Edytuj
                  </button>
                </div>
              \`;
              resultContainer.appendChild(cardElement);
            });
            
            resultContainer.classList.remove("hidden");
            successDiv.textContent = "Pomyślnie wygenerowano fiszki!";
            successDiv.classList.remove("hidden");
          }, 1500);
          
        } catch (error) {
          console.error("Generation error:", error);
          errorDiv.textContent = "Wystąpił błąd podczas generowania fiszek";
          errorDiv.classList.remove("hidden");
          loadingIndicator.classList.add("hidden");
        }
      });
    }
  });
`;
---

<Layout title="Generator fiszek">
  <PageWrapper title="Generator fiszek" description="Twórz fiszki automatycznie na podstawie tekstu">
    <div class="flex justify-end mb-6">
      <p class="text-blue-100/80 mr-4">
        Zalogowano jako: <span class="text-blue-200 font-medium">{user?.email || "Gość"}</span>
      </p>
      <form method="POST" action="/api/auth/logout">
        <button
          type="submit"
          class="px-3 py-1.5 bg-red-600/80 hover:bg-red-600 text-white rounded-lg transition-colors text-sm"
        >
          Wyloguj się
        </button>
      </form>
    </div>

    <GenerateFlashcardsView client:load />

    <div class="mt-8 flex justify-center">
      <a href="/collections" class="text-blue-200 hover:text-blue-100 transition-colors font-medium hover:underline">
        Przejdź do moich kolekcji fiszek
      </a>
    </div>
  </PageWrapper>
</Layout>

<!-- Renderowanie skryptu używając set:html -->
<script set:html={generateScript} />
